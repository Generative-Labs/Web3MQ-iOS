// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Pb_Web3MQMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var payload: Data = Data()

  var contentTopic: String = String()

  var version: UInt32 = 0

  var comeFrom: String = String()

  var fromSign: String = String()

  var payloadType: String = String()

  var cipherSuite: String = String()

  var needStore: Bool = false

  var timestamp: UInt64 = 0

  var messageID: String = String()

  var messageType: String {
    get {return _messageType ?? String()}
    set {_messageType = newValue}
  }
  /// Returns true if `messageType` has been explicitly set.
  var hasMessageType: Bool {return self._messageType != nil}
  /// Clears the value of `messageType`. Subsequent reads from it will return its default value.
  mutating func clearMessageType() {self._messageType = nil}

  var nodeID: String = String()

  /// base64 encode
  var validatePubKey: String = String()

  var extraData: Dictionary<String,String> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _messageType: String? = nil
}

struct Pb_Web3MQMessageStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var messageID: String = String()

  var contentTopic: String = String()

  /// received delivered read
  var messageStatus: String = String()

  var version: String = String()

  var comeFrom: String = String()

  var fromSign: String = String()

  var timestamp: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pb_NotificationItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var messageID: String = String()

  var version: UInt32 = 0

  var payload: Data = Data()

  var payloadType: String = String()

  var comeFrom: String = String()

  var fromSign: String = String()

  var contentTopic: String = String()

  var cipherSuite: String = String()

  var timestamp: UInt64 = 0

  var read: Bool = false

  var readTimestamp: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pb_Web3MQNotificationList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: [Pb_NotificationItem] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Pb_Web3MQMessage: @unchecked Sendable {}
extension Pb_Web3MQMessageStatus: @unchecked Sendable {}
extension Pb_NotificationItem: @unchecked Sendable {}
extension Pb_Web3MQNotificationList: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "pb"

extension Pb_Web3MQMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Web3MQMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "payload"),
    2: .same(proto: "contentTopic"),
    3: .same(proto: "version"),
    4: .same(proto: "comeFrom"),
    5: .same(proto: "fromSign"),
    6: .same(proto: "payloadType"),
    7: .same(proto: "cipherSuite"),
    8: .same(proto: "needStore"),
    9: .same(proto: "timestamp"),
    10: .same(proto: "messageId"),
    11: .same(proto: "messageType"),
    12: .same(proto: "nodeId"),
    13: .same(proto: "validatePubKey"),
    14: .same(proto: "extraData"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.payload) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contentTopic) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.version) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.comeFrom) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.fromSign) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.payloadType) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.cipherSuite) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.needStore) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self.timestamp) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.messageID) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self._messageType) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.nodeID) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.validatePubKey) }()
      case 14: try { try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.extraData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 1)
    }
    if !self.contentTopic.isEmpty {
      try visitor.visitSingularStringField(value: self.contentTopic, fieldNumber: 2)
    }
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 3)
    }
    if !self.comeFrom.isEmpty {
      try visitor.visitSingularStringField(value: self.comeFrom, fieldNumber: 4)
    }
    if !self.fromSign.isEmpty {
      try visitor.visitSingularStringField(value: self.fromSign, fieldNumber: 5)
    }
    if !self.payloadType.isEmpty {
      try visitor.visitSingularStringField(value: self.payloadType, fieldNumber: 6)
    }
    if !self.cipherSuite.isEmpty {
      try visitor.visitSingularStringField(value: self.cipherSuite, fieldNumber: 7)
    }
    if self.needStore != false {
      try visitor.visitSingularBoolField(value: self.needStore, fieldNumber: 8)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 9)
    }
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 10)
    }
    try { if let v = self._messageType {
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    } }()
    if !self.nodeID.isEmpty {
      try visitor.visitSingularStringField(value: self.nodeID, fieldNumber: 12)
    }
    if !self.validatePubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.validatePubKey, fieldNumber: 13)
    }
    if !self.extraData.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.extraData, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_Web3MQMessage, rhs: Pb_Web3MQMessage) -> Bool {
    if lhs.payload != rhs.payload {return false}
    if lhs.contentTopic != rhs.contentTopic {return false}
    if lhs.version != rhs.version {return false}
    if lhs.comeFrom != rhs.comeFrom {return false}
    if lhs.fromSign != rhs.fromSign {return false}
    if lhs.payloadType != rhs.payloadType {return false}
    if lhs.cipherSuite != rhs.cipherSuite {return false}
    if lhs.needStore != rhs.needStore {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.messageID != rhs.messageID {return false}
    if lhs._messageType != rhs._messageType {return false}
    if lhs.nodeID != rhs.nodeID {return false}
    if lhs.validatePubKey != rhs.validatePubKey {return false}
    if lhs.extraData != rhs.extraData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_Web3MQMessageStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Web3MQMessageStatus"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messageId"),
    2: .same(proto: "contentTopic"),
    3: .same(proto: "messageStatus"),
    4: .same(proto: "version"),
    5: .same(proto: "comeFrom"),
    6: .same(proto: "fromSign"),
    7: .same(proto: "timestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.messageID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.contentTopic) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.messageStatus) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.comeFrom) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.fromSign) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self.timestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 1)
    }
    if !self.contentTopic.isEmpty {
      try visitor.visitSingularStringField(value: self.contentTopic, fieldNumber: 2)
    }
    if !self.messageStatus.isEmpty {
      try visitor.visitSingularStringField(value: self.messageStatus, fieldNumber: 3)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 4)
    }
    if !self.comeFrom.isEmpty {
      try visitor.visitSingularStringField(value: self.comeFrom, fieldNumber: 5)
    }
    if !self.fromSign.isEmpty {
      try visitor.visitSingularStringField(value: self.fromSign, fieldNumber: 6)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_Web3MQMessageStatus, rhs: Pb_Web3MQMessageStatus) -> Bool {
    if lhs.messageID != rhs.messageID {return false}
    if lhs.contentTopic != rhs.contentTopic {return false}
    if lhs.messageStatus != rhs.messageStatus {return false}
    if lhs.version != rhs.version {return false}
    if lhs.comeFrom != rhs.comeFrom {return false}
    if lhs.fromSign != rhs.fromSign {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_NotificationItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NotificationItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "messageId"),
    2: .same(proto: "version"),
    3: .same(proto: "payload"),
    4: .same(proto: "payloadType"),
    5: .same(proto: "comeFrom"),
    6: .same(proto: "fromSign"),
    7: .same(proto: "contentTopic"),
    8: .same(proto: "cipherSuite"),
    9: .same(proto: "timestamp"),
    10: .same(proto: "read"),
    11: .same(proto: "readTimestamp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.messageID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.version) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.payload) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.payloadType) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.comeFrom) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.fromSign) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.contentTopic) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.cipherSuite) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self.timestamp) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.read) }()
      case 11: try { try decoder.decodeSingularUInt64Field(value: &self.readTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.messageID.isEmpty {
      try visitor.visitSingularStringField(value: self.messageID, fieldNumber: 1)
    }
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 2)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 3)
    }
    if !self.payloadType.isEmpty {
      try visitor.visitSingularStringField(value: self.payloadType, fieldNumber: 4)
    }
    if !self.comeFrom.isEmpty {
      try visitor.visitSingularStringField(value: self.comeFrom, fieldNumber: 5)
    }
    if !self.fromSign.isEmpty {
      try visitor.visitSingularStringField(value: self.fromSign, fieldNumber: 6)
    }
    if !self.contentTopic.isEmpty {
      try visitor.visitSingularStringField(value: self.contentTopic, fieldNumber: 7)
    }
    if !self.cipherSuite.isEmpty {
      try visitor.visitSingularStringField(value: self.cipherSuite, fieldNumber: 8)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 9)
    }
    if self.read != false {
      try visitor.visitSingularBoolField(value: self.read, fieldNumber: 10)
    }
    if self.readTimestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.readTimestamp, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_NotificationItem, rhs: Pb_NotificationItem) -> Bool {
    if lhs.messageID != rhs.messageID {return false}
    if lhs.version != rhs.version {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.payloadType != rhs.payloadType {return false}
    if lhs.comeFrom != rhs.comeFrom {return false}
    if lhs.fromSign != rhs.fromSign {return false}
    if lhs.contentTopic != rhs.contentTopic {return false}
    if lhs.cipherSuite != rhs.cipherSuite {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.read != rhs.read {return false}
    if lhs.readTimestamp != rhs.readTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_Web3MQNotificationList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Web3MQNotificationList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_Web3MQNotificationList, rhs: Pb_Web3MQNotificationList) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
