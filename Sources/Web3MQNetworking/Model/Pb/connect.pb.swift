// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: connect.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Pb_ConnectCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var nodeID: String = String()

  var userID: String = String()

  var timestamp: UInt64 = 0

  var msgSign: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pb_DisconnectCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var nodeID: String = String()

  var userID: String = String()

  var timestamp: UInt64 = 0

  var msgSign: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pb_BridgeConnectCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var nodeID: String = String()

  var dappID: String = String()

  var topicID: String = String()

  var signatureTimestamp: UInt64 = 0

  var dappSignature: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Pb_ConnectCommand: @unchecked Sendable {}
extension Pb_DisconnectCommand: @unchecked Sendable {}
extension Pb_BridgeConnectCommand: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "pb"

extension Pb_ConnectCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConnectCommand"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nodeId"),
    2: .same(proto: "userId"),
    3: .same(proto: "timestamp"),
    4: .same(proto: "msgSign"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.nodeID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.timestamp) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.msgSign) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nodeID.isEmpty {
      try visitor.visitSingularStringField(value: self.nodeID, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 3)
    }
    if !self.msgSign.isEmpty {
      try visitor.visitSingularStringField(value: self.msgSign, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_ConnectCommand, rhs: Pb_ConnectCommand) -> Bool {
    if lhs.nodeID != rhs.nodeID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.msgSign != rhs.msgSign {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_DisconnectCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DisconnectCommand"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nodeId"),
    2: .same(proto: "userId"),
    3: .same(proto: "timestamp"),
    4: .same(proto: "msgSign"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.nodeID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.userID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.timestamp) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.msgSign) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nodeID.isEmpty {
      try visitor.visitSingularStringField(value: self.nodeID, fieldNumber: 1)
    }
    if !self.userID.isEmpty {
      try visitor.visitSingularStringField(value: self.userID, fieldNumber: 2)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.timestamp, fieldNumber: 3)
    }
    if !self.msgSign.isEmpty {
      try visitor.visitSingularStringField(value: self.msgSign, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_DisconnectCommand, rhs: Pb_DisconnectCommand) -> Bool {
    if lhs.nodeID != rhs.nodeID {return false}
    if lhs.userID != rhs.userID {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.msgSign != rhs.msgSign {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pb_BridgeConnectCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BridgeConnectCommand"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "NodeID"),
    2: .same(proto: "DAppID"),
    3: .same(proto: "TopicID"),
    4: .same(proto: "SignatureTimestamp"),
    5: .same(proto: "DAppSignature"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.nodeID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.dappID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.topicID) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.signatureTimestamp) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.dappSignature) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nodeID.isEmpty {
      try visitor.visitSingularStringField(value: self.nodeID, fieldNumber: 1)
    }
    if !self.dappID.isEmpty {
      try visitor.visitSingularStringField(value: self.dappID, fieldNumber: 2)
    }
    if !self.topicID.isEmpty {
      try visitor.visitSingularStringField(value: self.topicID, fieldNumber: 3)
    }
    if self.signatureTimestamp != 0 {
      try visitor.visitSingularUInt64Field(value: self.signatureTimestamp, fieldNumber: 4)
    }
    if !self.dappSignature.isEmpty {
      try visitor.visitSingularStringField(value: self.dappSignature, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pb_BridgeConnectCommand, rhs: Pb_BridgeConnectCommand) -> Bool {
    if lhs.nodeID != rhs.nodeID {return false}
    if lhs.dappID != rhs.dappID {return false}
    if lhs.topicID != rhs.topicID {return false}
    if lhs.signatureTimestamp != rhs.signatureTimestamp {return false}
    if lhs.dappSignature != rhs.dappSignature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
